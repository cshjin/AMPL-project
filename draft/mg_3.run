#----------------------------------------
# FARMAR RUN COMMEND
#----------------------------------------

reset;
option solver gurobi;
option presolve 1;
# option cplex_options 'sensitivity';
option precision 4;
#option show_stats 1;
include mg_3.mod;
include mg_3.dat;

read {t in Time} WindSpeed[t] < WindSpeed.txt;
read {t in Time} CoolingDegreeHours[t] < CoolingDegreeHours.txt;
read {t in Time} HeatDegreeHours[t] < HeatDegreeHours.txt;
read {t in Time} CloudOvercastPercentage[t] < CloudOvercastPercentage.txt;
read {t in Time} SolarRadi[t] < SolarRadi.txt;
read {t in Time} StateSequence[t] < StateSequence.txt;
read {t in Time} Buying[t] < BuyingPrice.txt;
read {t in Time} Selling[t] < SellingPrice.txt;
read {t in Time} DemandSeq[t] < Demand.txt;
read {t in Time} ResourcesSeq[t] < Resources.txt;

## one approach
for { t in 1..SIZE-1} {
#	let Demand := HeatDegreeHours[t]*1000+CoolingDegreeHours[t]*1000
#				+ Uniform(500,5000);
#	let Resources := 0.5 * 0.5 * 5 * 5 * 1.27 * Pi
#				* WindSpeed[t] * WindSpeed[t] * WindSpeed[t] 
#				+ 1.2 * 100 * SolarRadi[t] * (1- CloudOvercastPercentage[t]);
	let Demand := DemandSeq[t];
	let Resources := ResourcesSeq[t];

	# change probability of each stage
	if StateSequence[t] = 1 # N
		then {
			let P["N"]:= 0.7;
			let P["A"]:= 0.2;
			let P["M"]:= 0.1;
		}
	else if StateSequence[t] = 2 # A
		then {
			let P["N"]:= 0.6;
			let P["A"]:= 0.3;
			let P["M"]:= 0.1;
		}
	else if StateSequence[t] = 3 # M
		then {
			let P["N"]:= 0.5;
			let P["A"]:= 0.4;
			let P["M"]:= 0.1;
		};

	let BuyingPrice := Buying[t];
	let SellingPrice := Selling[t];
	# print Buying[t+1];
	let BuyingPrice_stage := Buying[t+1 mod SIZE];
	let SellingPrice_stage := Selling[t+1 mod SIZE];
	let Demand_stage := DemandSeq[t+1 mod SIZE];
	let Resources_stage["N"] := ResourcesSeq[t+1 mod SIZE];
	let Resources_stage["A"] := ResourcesSeq[t+1 mod SIZE]/2;
	let Resources_stage["M"] := ResourcesSeq[t+1 mod SIZE]/4;

	print t > mg_3.out;
	solve;
	display TransitionPrice * (amount['BC']+amount['BG']
		+amount['GB']+amount['RB']) +
	ReservePrice * (InitBattery-amount['BC'] - amount['BG']
		+amount['GB']+amount['RB']) +
	BuyingPrice * (amount['GB'] + amount['GC']) -
	SellingPrice * (amount['BG'] + amount['RG']) > mg_3.out;

	display _objname, _obj > mg_3.out;
	
	let InitBattery := InitBattery 
						+ amount['GB'] + amount['RB'] 
						- amount['BG'] - amount['BC'];
}
